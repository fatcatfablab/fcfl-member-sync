// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fatcatfablab/fcfl-member-sync/stripe/listener (interfaces: memberDb)
//
// Generated by this command:
//
//	mockgen --destination mock_memberdb_test.go --package listener . memberDb
//

// Package listener is a generated GoMock package.
package listener

import (
	reflect "reflect"

	types "github.com/fatcatfablab/fcfl-member-sync/stripe/types"
	gomock "go.uber.org/mock/gomock"
)

// MockmemberDb is a mock of memberDb interface.
type MockmemberDb struct {
	ctrl     *gomock.Controller
	recorder *MockmemberDbMockRecorder
	isgomock struct{}
}

// MockmemberDbMockRecorder is the mock recorder for MockmemberDb.
type MockmemberDbMockRecorder struct {
	mock *MockmemberDb
}

// NewMockmemberDb creates a new mock instance.
func NewMockmemberDb(ctrl *gomock.Controller) *MockmemberDb {
	mock := &MockmemberDb{ctrl: ctrl}
	mock.recorder = &MockmemberDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmemberDb) EXPECT() *MockmemberDbMockRecorder {
	return m.recorder
}

// ActivateMember mocks base method.
func (m *MockmemberDb) ActivateMember(customerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateMember", customerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateMember indicates an expected call of ActivateMember.
func (mr *MockmemberDbMockRecorder) ActivateMember(customerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateMember", reflect.TypeOf((*MockmemberDb)(nil).ActivateMember), customerId)
}

// CreateMember mocks base method.
func (m *MockmemberDb) CreateMember(c types.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockmemberDbMockRecorder) CreateMember(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockmemberDb)(nil).CreateMember), c)
}

// DeactivateMember mocks base method.
func (m *MockmemberDb) DeactivateMember(customerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateMember", customerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateMember indicates an expected call of DeactivateMember.
func (mr *MockmemberDbMockRecorder) DeactivateMember(customerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateMember", reflect.TypeOf((*MockmemberDb)(nil).DeactivateMember), customerId)
}

// FindMemberByCustomerId mocks base method.
func (m *MockmemberDb) FindMemberByCustomerId(customerId string) (*types.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMemberByCustomerId", customerId)
	ret0, _ := ret[0].(*types.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMemberByCustomerId indicates an expected call of FindMemberByCustomerId.
func (mr *MockmemberDbMockRecorder) FindMemberByCustomerId(customerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMemberByCustomerId", reflect.TypeOf((*MockmemberDb)(nil).FindMemberByCustomerId), customerId)
}

// UpdateMemberAccess mocks base method.
func (m *MockmemberDb) UpdateMemberAccess(customerId, accessId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberAccess", customerId, accessId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemberAccess indicates an expected call of UpdateMemberAccess.
func (mr *MockmemberDbMockRecorder) UpdateMemberAccess(customerId, accessId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberAccess", reflect.TypeOf((*MockmemberDb)(nil).UpdateMemberAccess), customerId, accessId)
}
